#version 400 core

in vec2 pass_texCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D backTex;
uniform sampler2D rTex;
uniform sampler2D gTex;
uniform sampler2D bTex;
uniform sampler2D blend;

uniform sampler2D texSampler;
uniform vec3 lightCol;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void) {

	vec4 blendColour = texture(blend, pass_texCoords);
	
	float backTexAmount = 1- (blendColour.r + blendColour.g + blendColour.b);
	vec2 tileCoords = pass_texCoords * 40.0;
	vec4 backTexColour = texture(backTex, tileCoords) * backTexAmount;
	vec4 rTextureColour = texture(rTex, tileCoords) * blendColour.r;
	vec4 gTextureColour = texture(gTex, tileCoords) * blendColour.g;
	vec4 bTextureColour = texture(bTex, tileCoords) * blendColour.b;

	vec4 totalColour = backTexColour + rTextureColour + gTextureColour + bTextureColour;
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLightVector);
	float brightness = max(nDotl, 0.2);
	vec3 diffuse = brightness * lightCol;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDir = -unitLightVector;
	vec3 reflectedLightDir = reflect(lightDir, unitNormal);
	
	float specularFactor = dot(reflectedLightDir, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightCol;
	
	out_Color = vec4(diffuse, 1.0) * totalColour + vec4(finalSpecular, 1.0);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
	
}